@page "/"
@inject IJSRuntime js

<PageTitle>Maixnor Term</PageTitle>

@* desperately needs replacement *@

@foreach (var box in Boxes)
{
    <Block Element="box"/>
}

@* shall not be visible *@
@* <EditForm Model="this" OnSubmit="SubmitCommand"> *@
@*     <InputText id="autofocus" @bind-value="_command" @bind-value:event="oninput"></InputText> *@
@* </EditForm> *@

<form @onsubmit="SubmitCommand">
    <input @bind-value="_command" @bind-value:event="oninput" @onfocusin="StopBlinking" @onfocusout="StartBlinking"/>
</form>

<pre>guest@maixnor: ~$ <span class="highlight">@(_command)</span><span id="blinker" class="blinking">_</span> </pre>

@code {
    [CascadingParameter] 
    public List<Box> Boxes { get; set; } = new ();

    public record Box(string Command, string Response);

    private string? _command = string.Empty;

    private void SubmitCommand()
    {
        if (string.IsNullOrEmpty(_command))
            return;
        if (!_statements.ContainsKey(_command))
        {
            Boxes.Add(new Box(_command, $"The command '{_command}' is not recognized."));
        }
        else
        {
            _statements[_command].Invoke(this); // execute Statements
        }

        _command = string.Empty;

        StateHasChanged();
    }

    // Statements define changes to the State of the application
    readonly Dictionary<string, Action<Index>> _statements = new()
    {
        {
            "clear",        index => index.Boxes.Clear()
        },
        {
            "exit",         index => index.js.InvokeVoidAsync("window.close")
        },
        {
            "help",         index => index.Boxes.Add(new Box("help", Statements.Help))
        },
        {
            "email",        index => index.Boxes.Add(new Box("email", Statements.Email))
        },
        {
            "projects",     index => index.Boxes.Add(new Box("projects", Statements.Projects))
        },
        {
            "maixnorfetch",     index => index.Boxes.Add(new Box("maixnorfetch", Statements.MaixnorFetch))
        },
        {
            "42",           index => index.Boxes.Add(new Box( "42", "the answer to life, the universe, and everything"))
        },
        {
            "github",       index => index.js.InvokeVoidAsync("open", "https://github.com/maixnor", "_blank")
        },
        {
            "source",       index => index.js.InvokeVoidAsync("open", "https://github.com/maixnor/Maixnor.Terminal", "_blank")
        },
        {
            "linkedin",     index => index.js.InvokeVoidAsync("open", "https://www.linkedin.com/in/benjamin-meixner-a7b82617a/", "_blank")
        },
    };

    protected override void OnInitialized()
    {
        _statements["maixnorfetch"].Invoke(this);
        _statements["help"].Invoke(this);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            js.InvokeVoidAsync("focusInput");
        }
    }

    private void StopBlinking()
    {
    }

    private void StartBlinking()
    {
    }

}