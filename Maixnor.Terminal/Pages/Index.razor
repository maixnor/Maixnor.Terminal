@page "/"
@inject IJSRuntime js

<PageTitle>Maixnor Term</PageTitle>

@foreach (var box in Boxes)
{
    <Block Element="box"/>
}

<pre>
guest@maixnor: ~$ <bold class="bold">@(_command)</bold>
@if (_focus)
{
    <span>_</span>
} 
</pre>

@* is not visible *@
<form @onsubmit="SubmitCommand">
    <input id="focus" autocomplete="off" @bind-value="_command" @bind-value:event="oninput" @onfocusin="StopBlinking" @onfocusout="StartBlinking"/>
</form>

@code {
    [CascadingParameter] 
    public List<Box> Boxes { get; set; } = new ();

    public record Box(string Command, string Response);

    private string? _command = string.Empty;
    private string? Command => _command?.ToLower();
    private bool _focus;

    private void SubmitCommand()
    {
        if (string.IsNullOrEmpty(Command))
            return;
        if (!_statements.ContainsKey(Command))
        {
            Boxes.Add(new Box(Command, $"The command '{Command}' is not recognized."));
        }
        else
        {
            _statements[Command].Invoke(this); // execute Statements
        }

        _command = string.Empty;

        StateHasChanged();
    }

    // Statements define changes to the State of the application
    readonly Dictionary<string, Action<Index>> _statements = new()
    {
        {
            "clear",        index => index.Boxes.Clear()
        },
        {
            "exit",         index => index.js.InvokeVoidAsync("window.close")
        },
        {
            "help",         index => index.Boxes.Add(new Box("help", Statements.Help))
        },
        {
            "email",        index => index.Boxes.Add(new Box("email", Statements.Email))
        },
        {
            "projects",     index => index.Boxes.Add(new Box("projects", Statements.Projects))
        },
        {
            "maixnorfetch",     index => index.Boxes.Add(new Box("maixnorfetch", Statements.MaixnorFetch))
        },
        {
            "pwa",          index => index.Boxes.Add(new Box( "pwa", Statements.Pwa))
        },
        {
            "easter",       index => index.Boxes.Add(new Box( "easter", Statements.Easter))
        },
        {
            "42",           index => index.Boxes.Add(new Box( "42", "the answer to life, the universe, and everything"))
        },
        {
            "github",       index => index.js.InvokeVoidAsync("open", "https://github.com/maixnor", "_blank")
        },
        {
            "source",       index => index.js.InvokeVoidAsync("open", "https://github.com/maixnor/Maixnor.Terminal", "_blank")
        },
        {
            "linkedin",     index => index.js.InvokeVoidAsync("open", "https://www.linkedin.com/in/benjamin-meixner-a7b82617a/", "_blank")
        },
    };

    protected override void OnInitialized()
    {
        _statements["maixnorfetch"].Invoke(this);
        _statements["help"].Invoke(this);
    }

    private void StopBlinking()
    {
        _focus = true;
    }

    private void StartBlinking()
    {
        _focus = false;
    }

}